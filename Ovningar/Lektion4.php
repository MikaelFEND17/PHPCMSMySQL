<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>√ñvningar - Lektion 4</title>
</head>
<body>

<?php
/*

1 .
Skapa en funktion: multiply, som tar in 2 parametrar. I funktionen, multiplicera dessa nummer med varandra och echo resultatet av multiplikationen. Du f√•r anv√§nda vilka namn du vill p√• parametrarna.
Kalla p√• din funktion multiply med siffrorna 8,4 som argument
Om du gjort r√§tt ska du f√• siffran 32.

2 .
Skapa en funktion som heter calculate och som ist√§llet tar 3 parametrar och sedan multiplicerar de tv√• f√∂rsta parametrarna med varandra och delar v√§rdet med den tredje parametern, allts√•: param1 * param2 / param3. Funktionen ska sedan echo ut svaret.
Kalla sedan p√• din funktion med valfria v√§rden.

3 .
Skriv en funktion som heter highest_number som tar tv√• tal som parametrar.
Funktionen ska sedan j√§mf√∂ra vilket av talet som √§r st√∂rst och echo det st√∂rsta talet.
Kalla p√• din funktion med tv√• valfria v√§rden.

4 . Koden ovan √§r dock inte optimal. F√∂r det mesta vill vi att funktioner endast returnerar v√§rden. En funktions uppgift ska vara att returnera v√§rden s√• att vi kan √•teranv√§nda det v√§rdet och sedan fors√§tta g√∂ra mer ber√§kningar p√• det. N√§r vi har massa echo p√• det h√§r s√§ttet blir koden sv√•rare att √•teranv√§nda s√• vi vill nu skriva om v√•ra funktioner s√• att de endast returnerar v√§rden.

Refaktorera dina funktioner som du tidigare skapade:

De tv√• f√∂rsta funktionerna (multiply och calculate) ska returnera det slutgiltiga v√§rdet av ber√§kningarna. Sedan m√•ste du spara v√§rdena f√∂r att sedan anv√§nda echo p√• dem.
Den tredje funktionen highest_number ska returnera det h√∂gsta v√§rdet av de tv√• v√§rden som skickas in som parametrar. Om dock v√§rdet inte √§r ett nummer ska funktionen returnera false och om de b√•da parametrarna √§r samma v√§rde ska funktionen returnera "Samma v√§rde"
Spara v√§rdena som returneras p√• f√∂ljande s√§tt:

$multiply_answer = multiply(5,5);
echo $multiply_answer;

5 . Eftersom alla gillar katter s√• ska vi refaktorera v√•r Mjau Machine üôÄ

Du ska skriva en funktion som ska ha samma funktionalitet som v√•r ursprungliga Mjau Machine fr√•n tidigare √∂vningar men nu i form av en funktion.

6 .

Anv√§nd while-loopen du skapade fr√•n en av de tidigare uppgiftern. Nummer 5 i 03_loops

Denna loop ska du nu g√∂ra om till en funktion som tar 2 parametrar.

F√∂rsta parametern ska vara siffran som loppen ska r√§kna ner ifr√•n, allts√• hur m√•nga v√§rden funktionen ska g√• igenom.
Andra parametern ska vara om funktionen ska skriva ut j√§mna eller oj√§mna v√§rden.
7 .

Skriv en funktion som tar 2 parametrar. Parametrarna ska vara tv√• heltal. Funktionen ska multiplicera heltalen utan att anv√§nda *-operatorn.

8 . Skriv en funktion som tar in en parameter. Parametern ska vara en string. Funktionen ska sedan returnera str√§ngens l√§ngd p√• detta s√§tt:

"Str√§ngen du matade in √§r 14 tecken l√•ng"
9 .

Skapa en funktion som heter convert_string, funktionen ska ta tv√• parametrar. Den f√∂rsta parametern ska vara en str√§ng som skickas med, typ: "Goodbye World". Den andra parametern som skickas med ska best√§mma om str√§ngen ska konverteras till bara stora bokst√§ver eller bara sm√• bokst√§ver. Till detta kan man anv√§nda hj√§lpfunktionen: strtolower($string) och strtoupper($string)

10 . Skapa en funktion som tar en parameter, argumentet som skickas in ska vara en str√§ng. Funktionen ska sedan returnera det sista tecknet i str√§ngen som skickas in.

11 . Skriv en funktion med namnet make_paragraph som skriver ut en str√§ng som HTML-elementet <p>. Exempel: "hej"_ ska skrivas ut som "<p>hej</p>". Funktionen ska ha en parameter, som √§r str√§ngen som ska skrivas ut, och den ska inte returnera n√•got bara echoa ut.

12 . Funktionen make_paragraph() √§r lite begr√§nsad. T√§nk om vi vill g√∂ra <h1>-taggar? Eller <h2>, <h3> osv. Skriv en ny funktion med namnet make_heading. Funktionen beh√∂ver veta str√§ngen som ska skrivas ut och vilken heading det ska vara. Den beh√∂ver allts√• tv√• parametrar.

13 . Nu har vi tv√• funktioner som vi kan anv√§nda f√∂r att skapa HTML-paragrafer och headings. Men det blir v√§ldigt m√•nga funktioner om vi ska ha en funktion f√∂r varje m√∂jligt HTML-element. Vi beh√∂ver en funktion som kan g√∂ra flera sorters element. Skriv en funktion make_tag som kan g√∂ra alla sorters HTML-element.

14 . F√∂rb√§ttra make_tag s√• att man kan ange inline styles ocks√•. (Eller href f√∂r l√§nkar) Exempel: <p style="color: hotpink;">Exempeltext</p>

15 . Skriv en funktion som g√∂r om alla nyrader i en str√§ng till <br>-element. Funktionen ska ta str√§ngen som parameter och returnera en ny str√§ng. En nyrad i PHP skrivs '\n'.

16 . Skriv en funktion som returnerar en array med slumpade tal. Anv√§nd mt_rand() f√∂r att g√∂ra slumptal. Hur m√•nga parametrar beh√∂ver funktionen?

17 . Skriv en funktion som g√∂r om en array till en lista i HTML. Anv√§nd funktionen make_tag. Exempel: make_list( [1, 2] ) ‚Üí "<ul> <li>1</li> <li>2</li> </ul>"

18 . Skriv en funktion med namnet capitalize som g√∂r om ett anv√§ndarnamn till stora bokst√§ver.

19 . F√∂rb√§ttra funktionen s√• att den bara g√∂r f√∂rsta bokstaven stor. Tips √§r att anv√§nda substr()

20 . Skriv en funktion som genererar en random f√§rg.

Skriv en funktion som avrundar en float till n√§rmaste heltal med hj√§lp av typecast.

Exempel: round(3.9) ‚Üí 3, round(5.5) ‚Üí 6.
22 . Skriv en funktion som g√∂r om ett decimaltal till en str√§ng. Str√§ngen ska anv√§nda decimalkomma i st√§llet f√∂r decimalpunkt. Exempel: float_to_string(75.5) ‚Üí "75,5".

23 . Skriv en funktion som r√§knar ut summan av alla tal i en array. Skriv en annan som r√§knar ut medelv√§rdet.

24 . Skriv en funktion som tar en str√§ng som motsvarar en veckodag som parameter och returnerar en siffra. Om str√§ngen √§r "m√•ndag" ska funktionen returnera 1, "tisdag" ska bli 2 och "s√∂ndag" ska bli 7. Funktionen ska fungera oavsett om veckodagen st√•r med sm√• eller stora bokst√§ver.
*/
?>
    
</body>
</html>